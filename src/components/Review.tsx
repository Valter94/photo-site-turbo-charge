
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Star, Send } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const ReviewForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    rating: 5,
    review: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const handleRatingClick = (rating: number) => {
    setFormData({ ...formData, rating });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name || !formData.review) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø–æ email
      const subject = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç ${formData.name}`;
      const body = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ —Å–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ò—Ä–∏–Ω—ã:

‚≠ê –û—Ü–µ–Ω–∫–∞: ${formData.rating}/5 –∑–≤–µ–∑–¥

üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${formData.name}
üìß Email: ${formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìù –û—Ç–∑—ã–≤:
${formData.review}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ò—Ä–∏–Ω—ã`;

      window.location.href = `mailto:bagreshevafoto@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

      toast({
        title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
        description: "–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        name: '',
        email: '',
        rating: 5,
        review: ''
      });
    } catch (error) {
      console.error('Error submitting review:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl font-bold text-center bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent">
          ‚ú® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                –í–∞—à–µ –∏–º—è *
              </label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                required
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                placeholder="your@email.com"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ *
            </label>
            <div className="flex gap-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  type="button"
                  onClick={() => handleRatingClick(star)}
                  className="focus:outline-none transition-all duration-200 hover:scale-110"
                >
                  <Star
                    className={`w-8 h-8 ${
                      star <= formData.rating
                        ? 'text-yellow-400 fill-current'
                        : 'text-gray-300'
                    }`}
                  />
                </button>
              ))}
              <span className="ml-3 text-gray-600">
                {formData.rating} –∏–∑ 5 –∑–≤–µ–∑–¥
              </span>
            </div>
          </div>

          <div>
            <label htmlFor="review" className="block text-sm font-medium text-gray-700 mb-2">
              –í–∞—à –æ—Ç–∑—ã–≤ *
            </label>
            <Textarea
              id="review"
              value={formData.review}
              onChange={(e) => setFormData({ ...formData, review: e.target.value })}
              placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏..."
              rows={5}
              required
            />
          </div>

          <Button
            type="submit"
            disabled={isSubmitting}
            className="w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white py-3 text-lg font-semibold rounded-full shadow-lg transform transition-all duration-300 hover:scale-105"
          >
            {isSubmitting ? (
              '–û—Ç–ø—Ä–∞–≤–∫–∞...'
            ) : (
              <>
                <Send className="w-5 h-5 mr-2" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
              </>
            )}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
};

export default ReviewForm;
